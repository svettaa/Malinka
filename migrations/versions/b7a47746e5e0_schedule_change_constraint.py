"""Schedule change constraint

Revision ID: b7a47746e5e0
Revises: e8c69831d42b
Create Date: 2020-05-02 09:52:58.757647

"""
from alembic import op
import sqlalchemy as sa

from app.alembic_op import ReplaceableObject

# revision identifiers, used by Alembic.
revision = 'b7a47746e5e0'
down_revision = 'e8c69831d42b'
branch_labels = None
depends_on = None

exists_intersecting_schedule_change = ReplaceableObject(
    'exists_intersecting_schedule_change(param_change_id integer, param_master_id integer, '
    'param_change_start timestamp, param_change_end timestamp)',
    """
   RETURNS boolean AS $$
   BEGIN
       RETURN EXISTS (SELECT *
                      FROM Schedule_Change
                      WHERE Schedule_Change.master_id = param_master_id AND
                            Schedule_Change.id <> param_change_id AND
                            Schedule_Change.change_start < param_change_end AND
                            Schedule_Change.change_end > param_change_start);
   END;
   $$ LANGUAGE plpgsql;
   """
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_sp(exists_intersecting_schedule_change)
    op.create_check_constraint('change_intersects', 'schedule_change',
                               'NOT exists_intersecting_schedule_change'
                               '    (id, master_id, change_start, change_end)')
    op.create_check_constraint('change_start_less_end', 'schedule_change',
                               'change_start < change_end')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('change_start_less_end', 'schedule_change', type_='check')
    op.drop_constraint('change_intersects', 'schedule_change', type_='check')
    op.drop_sp(exists_intersecting_schedule_change)
    # ### end Alembic commands ###
